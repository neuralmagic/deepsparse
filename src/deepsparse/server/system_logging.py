# Copyright (c) 2021 - present / Neuralmagic, Inc. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

from typing import Any, Dict, List

from deepsparse import Pipeline
from deepsparse.server.build_logger import extract_system_group_data
from deepsparse.server.config import ServerConfig


__all__ = ["SystemLoggingManager"]


class SystemLoggingManager:
    """
    An object that is responsible for logging system metrics.
    It is initialized with a list of the system group names
    (extracted from ServerConfig object) that define
    the scope of system metrics that are logged.

    The usual flow of system metrics is as follows:
    0. The `server_logger` is created from the ServerConfig
        object outside the SystemLoggingManager context
        and passed to every Pipeline instance in the DeepSparseServer.

    1. The SystemLoggingManager is initialized with a list of system
        group names (extracted from ServerConfig).
    2. After every request, the SystemLoggingManager is called to log
        system metrics (the `log` method).

        - for some system data groups, the SystemLoggingManager will call an
            external method to compute the data to be logged (e.g. to obtain
            the current CPU utilization). This information is then passed
            by the appropriate method of the SystemLoggingManager, through the
            server_logger's' log' method to the FunctionLogger responsible for
            logging the particular system metric group data.

        - for other system data groups, the SystemLoggingManager will call an
            internal method of the `Pipeline` to log the data generated by the
            pipeline (e.g. to obtain the inference latency of the pipeline). This
            will bypass the SystemLoggingManager object - the data will flow from
            the `Pipeline` directly to the `server_logger` through the `Pipeline`'s
            `log` method.

    :param system_group_names: a list of system group names that define the scope
        of system metrics that are logged.
        E.g. ["resource_utilization", "request_details""]


    """

    def __init__(self, system_group_names: List[str]):
        self.system_group_names = system_group_names

    @classmethod
    def from_server_config(cls, server_config: ServerConfig) -> "SystemLoggingManager":
        """
        Factory method that creates a SystemLoggingManager
        object from a ServerConfig object.
        :param server_config: a ServerConfig object
        :return: a SystemLoggingManager object
        """
        system_logging_config = server_config.system_logging
        system_group_names = extract_system_group_data(system_logging_config).keys()
        return cls(system_group_names)

    def log(self, pipeline: Pipeline, **kwargs: Dict[str, Any]):
        """
        Logs system metrics for the pipeline.

        :param pipeline: a Pipeline object
        :param kwargs: a dictionary of additional data to be logged
        """
        if not pipeline.logger:
            # no server_logger is set for the pipeline
            # no system metrics will be logged
            return
        for group_name in self.system_group_names:
            # multiple switch statements that are called
            # based on the available system group name
            if group_name == "resource_utilization":
                self.log_resource_utilization(pipeline)

            elif group_name == "request_details":
                self.log_request_details(pipeline, **kwargs)

            else:
                raise ValueError(f"Unknown system group name: {group_name}")

    def log_resource_utilization(self, pipeline: Pipeline):
        """
        Scope for 1.4:
        - CPU utilization overall
        - Memory available overall
        - Memory used overall (shall we continuously log this?
          this will be a constant value in time)
        - Number of core used by the pipeline
        """
        raise NotImplementedError

    def log_request_details(self, pipeline: Pipeline, **kwargs: Dict[str, Any]):
        """
        Scope for 1.4:
        - Number of Successful Requests
        (binary events, 1 or 0 per invocation of an endpoint)
        - Batch size
        - Number of Inferences (
        number of successful inferences times the respective batch size)
        """
        raise NotImplementedError
